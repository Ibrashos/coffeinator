import asyncio
import logging
import os

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.types.web_app_info import WebAppInfo



import sqlite3 as sq

from dotenv import load_dotenv

import ChatGPT as gpt


load_dotenv()
bot = Bot(os.getenv("TOKEN_TGBOT"), parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)




def request_to_user_db(sql):
    with sq.connect("cofe_table.db") as con:  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cur = con.cursor()  # —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cur.execute(sql)
        result = cur.fetchall()
        return result


def check_user(mes):
    sql = 'SELECT tg_id FROM users'
    check = request_to_user_db(sql)
    a = []
    for res in check:
        for x in res:
            a.append(x)
    if mes.chat.id in a:
        return 2
    else:
        return 1


def add_order(mes, data):  #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    request_to_user_db("""INSERT INTO korzina (tg_id,item) VALUES (?,?)""",(mes.chat.id, data))
    if check_user(mes) == 1:
        request_to_user_db("""INSERT INTO users (tg_id) VALUES (?)""", (mes.chat.id))


def list_product(num):
    items = {'cofe1':{'espresso': '–≠–∫—Å–ø—Ä–µ—Å—Å–æ', 'price': '160'},
             'cofe2':{'latte': '–õ–∞—Ç—Ç–µ', 'price': '250'},
             'cofe3':{'americano': '–ê–º–µ—Ä–∏–∫–∞–Ω–æ', 'price': '180'}}
    topings = {'toping1':{'milk': '–ú–æ–ª–æ–∫–æ', 'price': '30'},
               'toping2':{'slivki': '–°–ª–∏–≤–∫–∏', 'price': '20'},
               'toping3':{'kakao': '–ö–∞–∫–∞–æ', 'price': '50'},
               'toping4':{'cinnamon': '–ö–æ—Ä–∏—Ü–∞', 'price': '10'}}
    if num == 1:
        return items
    else: return topings


class SomeState(StatesGroup):
    waiting_ai = State()
    item_wait = State()




def faq():
    items = {
        'question1': '–ö–∞–∫–∏–µ –∫–æ—Ñ–µ–π–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?',
        'question2': '–ö–∞–∫–∏–µ –¥–æ–±–∞–≤–∫–∏ –∏ —Å–∏—Ä–æ–ø—ã —É –≤–∞—Å –µ—Å—Ç—å –¥–ª—è –∫–æ—Ñ–µ?',
        'question3': '–ö–∞–∫–æ–≤—ã –≤–∞—à–∏ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã?'
    }
    return items


@dp.message_handler(commands=["start"])
async def command_start_handler(message: Message) -> None:
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ú–µ–Ω—é','FAQ')
    check = request_to_user_db(f'SELECT * FROM users WHERE tg_id = {message.chat.id}')
    try:
        check = check[0][2]
    except IndexError:
        with sq.connect("cofe_table.db") as con:  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cur = con.cursor()  # —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            cur.execute("""INSERT INTO users (tg_id,privilages) VALUES (?,?)""", (message.chat.id, 'Client'))
    check = request_to_user_db(f'SELECT * FROM users WHERE tg_id = {message.chat.id}')
    if check[0][2].lower() == 'admin':
        markup.add('–ó–∞–∫–∞–∑—ã')
        await bot.send_message(message.chat.id, f"–Ø –±–æ—Ç –±–∞—Ä–∏—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –ü—Ä–µ—Å—Ç–∏–∂ \n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π —Å–µ—Ç–∏ –∫–æ—Ñ–µ–µ–Ω \n\n –ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç¬ª –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ ‚òïÔ∏èüç©", reply_markup=markup)
    else:
        await bot.send_message(message.chat.id, f"–Ø –±–æ—Ç –±–∞—Ä–∏—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –ü—Ä–µ—Å—Ç–∏–∂ \n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π —Å–µ—Ç–∏ –∫–æ—Ñ–µ–µ–Ω \n\n –ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç¬ª –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ ‚òïÔ∏èüç©", reply_markup=markup)


@dp.message_handler(commands='cancel')
async def cancel_handler(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ú–µ–Ω—é', 'FAQ')
    await message.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=markup)


# –ú–ï–ù–Æ –ú–ï–ù–Æ –ú–ï–ù–Æ –ú–ï–ù–Æ –ú–ï–ù–Æ –ú–ï–ù–Æ –ú–ï–ù–Æ –ú–ï–ù–Æ –ú–ï–ù–Æ
@dp.message_handler()
async def message_handler(message: types.Message):
    if message.text.lower() == '–º–µ–Ω—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ö–æ—Ñ–µ','–î–æ–±–∞–≤–∫–∏','–ù–∞–∑–∞–¥')
        kb = InlineKeyboardMarkup(row_width=1)
        button = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", web_app=WebAppInfo(url='https://gvbu3gxzfunovqryq18fow.on.drv.tw/projects/live_1/'))
        kb.add(button)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=kb)



    if message.text.lower() == '–∑–∞–∫–∞–∑—ã':
        check = request_to_user_db(f'SELECT * FROM users WHERE tg_id = {message.chat.id}')
        check = check[0][2]
        if check.lower() == 'admin':
            result = request_to_user_db(f'SELECT tg_id FROM korzina')
            a = []
            for num in result:
                for i in num:
                    if i not in a:
                        a.append(i)
            result = a
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            kb = InlineKeyboardMarkup(row_width=1)
            for res in result:
                markup.add(str(res))
            await message.answer('–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...', reply_markup=markup)
            await message.answer('–ö–∞–∫–æ–π –∑–∞–∫–∞–∑ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=kb.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞‚õî', callback_data='cancel_adm')))
            await SomeState.item_wait.set()



    # FAQ FAQ FAQ FAQ FAQ FAQ FAQ FAQ FAQ FAQ FAQ FAQ
    if message.text.lower() == 'faq':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('FAQ')
        item = faq()
        kb = InlineKeyboardMarkup(row_width=1)

        for key, value in item.items():
            button = InlineKeyboardButton(text=value, callback_data=key)

            kb.add(button)
        button = InlineKeyboardButton(text='–°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò ‚Üó', callback_data='ai')
        kb.add(button)
        await bot.send_message(message.chat.id, "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=kb)

    # –ù–ê–ó–ê–î –ù–ê–ó–ê–î –ù–ê–ó–ê–î –ù–ê–ó–ê–î –ù–ê–ó–ê–î –ù–ê–ó–ê–î –ù–ê–ó–ê–î –ù–ê–ó–ê–î
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ú–µ–Ω—é', 'FAQ')
        check = request_to_user_db(f'SELECT * FROM users WHERE tg_id = {message.chat.id}')
        check = check[0][2]
        if check.lower() == 'admin':
            markup.add('–ó–∞–∫–∞–∑—ã')
            await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", reply_markup=markup)
        else:
            await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", reply_markup=markup)
@dp.message_handler(state=SomeState.item_wait)
async def handle_message(message: Message, state: FSMContext):
    check = request_to_user_db(f'SELECT * FROM korzina WHERE tg_id == {message.chat.id}')
    a = []
    kb = InlineKeyboardMarkup(row_width=1)
    for res in check:
        print(res)
        a.append(res[2])
    for i in a:
        kb.add(InlineKeyboardButton(text=f"‚òïÔ∏è{i}", callback_data=i))
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(message.chat.id, '–ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=kb)
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.finish()

# –û–¢–í–ï–¢–´–´–´ –Ω–∞ FAQ
@dp.callback_query_handler(Text("question1"))
async def send_answer(callback: types.CallbackQuery):
    await callback.message.answer('–®–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–æ—Ñ–µ–π–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤, –≤–∫–ª—é—á–∞—è —ç—Å–ø—Ä–µ—Å—Å–æ, –∫–∞–ø—É—á—á–∏–Ω–æ, –ª–∞—Ç—Ç–µ, –∞–º–µ—Ä–∏–∫–∞–Ω–æ, –º–∞–∫–∏–∞—Ç–æ –∏ –¥—Ä—É–≥–∏–µ –Ω–∞–ø–∏—Ç–∫–∏')
@dp.callback_query_handler(Text("question2"))
async def send_answer(callback: types.CallbackQuery):
    await callback.message.answer('–†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –º–æ–ª–æ–∫–∞, —Å–ª–∏–≤–∫–∏, –≤–∞–Ω–∏–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø, –∫–æ–∫–æ—Å–æ–≤—É—é —Å—Ç—Ä—É–∂–∫—É –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ')
@dp.callback_query_handler(Text("question3"))
async def send_answer(callback: types.CallbackQuery):
    await callback.message.answer('–ù–∞—à–∞ –∫–æ—Ñ–µ–π–Ω—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 8:00 —É—Ç—Ä–∞ –¥–æ 10:00 –≤–µ—á–µ—Ä–∞ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É, –∏ —Å 9:00 —É—Ç—Ä–∞ –¥–æ 9:00 –≤–µ—á–µ—Ä–∞ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ')


@dp.callback_query_handler(Text("ai"))
async def button_pressed_handler(callback: types.CallbackQuery, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    await callback.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å")
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
    button_data = callback.data
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(button_data=button_data)
    # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await SomeState.waiting_ai.set()


@dp.message_handler(state=SomeState.waiting_ai)
async def handle_message(message: Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    button_data = (await state.get_data())["button_data"]
    await bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...')
    await message.answer(f"–í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {gpt.chat(text=message.text)}")
    kb = InlineKeyboardMarkup(row_width=1)
    button = InlineKeyboardButton(text='–°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò ‚Üó', callback_data='ai')
    kb.add(button)
    await bot.send_message(message.chat.id, "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑", reply_markup=kb)
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.finish()


@dp.callback_query_handler(Text('cancel'))
async def send_answer(callback: types.CallbackQuery):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ú–µ–Ω—é', 'FAQ')
    await bot.send_message(callback.message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=markup)


#–ú–ï–ù–Ø–Ø–Ø–Ø–¢–¨
@dp.callback_query_handler(Text('cancel_adm'))
async def send_answer(callback: types.CallbackQuery,state:FSMContext):
    await state.finish()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ú–µ–Ω—é', 'FAQ')
    markup.add('–ó–∞–∫–∞–∑—ã')
    await bot.send_message(callback.message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º", reply_markup=markup)




async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        print("–ë–æ—Ç –≤ —Å–µ—Ç–∏...")
        logging.basicConfig(level=logging.INFO)
        asyncio.run(main())
    except BaseException:
        print("Error")

# Button = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–ª–æ–≥ Skillbox', url='https://skillbox.ru/media/code/')
# Button2 = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å–∞–º Skillbox', url='https://skillbox.ru/code/')



